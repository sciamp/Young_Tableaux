/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 12.09.0 ] */

/* [wxMaxima: input   start ] */
file_search_maxima : cons(sconcat("/home/sciamp/Sources/tesi/Young_Tableaux/###.{lisp,mac,mc}"), file_search_maxima)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
load (young);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
E:new_ydiagram_safe ([2,1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
U:new_ydiagram_safe ([2,1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ds:yschur_polynomial_product (E,U);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ds:unique(ds);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
e:reverse(E@rows);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
u:reverse (U@rows);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
skews:map (lambda ([x], fill_first_line (remove_tableau_column (generic_skew_tableau (x[1], e, [], 1),[]), u)), ds);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
map (lambda ([x], if (not emptyp (skews[x])) then 
        [ds[x],littlewood_richardson_num (d, e, u,[[skews[x][1],append([skews[x][2]],makelist(0,length (u)-1))]],1,2)]),
    makelist (i,i,1,length (skews)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l1:map (lambda ([x], if (not emptyp (skews[x])) then 
        [ds[x][1],length (littlewood_richardson_num (d, e, u,[[skews[x][1],append([skews[x][2]],makelist(0,length (u)-1))]],1,2))]),
    makelist (i,i,1,length (skews)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l2 : delete (false, map (lambda ([x], if (listp (x)) and (x[2] > 0) then x ), l1));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly:map (lambda ([x], x[2]*fl_better_yschur_polynomial_rows (x[1],6)), l2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
print ("Ã¨ un caso che ritornino tutti scambiati?")$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
length (poly);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[2];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[3];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[4];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[5];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[6];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
poly[7];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
prod_lr:sum (poly[i],i,1,length(poly));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
polyE : fl_better_yschur_polynomial (E,6);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
polyU : fl_better_yschur_polynomial (U,6);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
prod : ratsimp (polyE*polyU);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
prod_lr_s : ratsimp (prod_lr);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is (expand (prod - prod_lr = 0));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
ratsimp ( expand (prod - prod_lr));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
divide (polyU,polyE,x[1],x[2],x[3],x[4],x[5],x[6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q_lr:divide (prod_lr,polyU,x[1],x[2],x[3],x[4],x[5],x[6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
q:divide (prod,polyU,x[1],x[2],x[3],x[4],x[5],x[6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is (q_lr[1]=q[1]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
divide (prod_lr,prod,x[1],x[2],x[3],x[4],x[5],x[6]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
is (q=polyU);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i : 1 thru length (skews) do block (
    [lrn],
    if not emptyp (skews[i]) then block (
        print ("d ",ds[i]),
        print ("skew ",skews[i][1]),   
        lrn : littlewood_richardson_num (d, e, u,[[skews[i][1],append([skews[i][2]],makelist(0,length (u)-1))]],1,2),
        print ("littlewood-richardson output ",lrn),
        print ("littlewood richardson number ", length (lrn))));
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
